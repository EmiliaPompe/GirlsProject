% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/weights_function.R
\name{weightsComputation}
\alias{weightsComputation}
\title{Weights computation for Consensus MCMC algorithm}
\usage{
weightsComputation(df, method)
}
\arguments{
\item{df}{A dataframe derived from running \code{\link{BetaMH}} or \code{\link{NormalMH}} or \code{\link{GammaMH}} on the relative data.}

\item{method}{The method that needs to be used to aggregate the markov chains obtained from different machines. Need to be used when running in parallel.}
}
\value{
The functions returns the aggregated Markov chain from the Consensus MCMC.
}
\description{
\code{} The function computes the weights used for the Consensus MCMC algorithm. 
The computed weights are used to aggregate the Markov Chains obtained parallelizing the data on different machines.
}
\examples{


############################################################################
#  Generate data and specify params
############################################################################

sigma_known = 1
observations <- rnorm(10000, 3 , sigma_known)
nr_servers <- 4
shards <- split(observations, rep(seq_len(nr_servers),each=length(observations)/nr_servers))

n_iter = 10000
burn_in = 0.1*n_iter
sigma = 0.01  # sigma for the proposal distribution
mean_prior=0
sigma_prior=1.0
x_0 = -5

############################################################################
#  Split data into shards and run on 4 machines
############################################################################

clust <- makePSOCKcluster(names = c("greywagtail",
                                    "greyheron",
                                    "greypartridge",
                                    "greyplover"))

clusterEvalQ(cl = clust, devtools::load_all("~/Workspace/GirlsProject/ConsensusMCMC/"))

lambda <- clusterApplyLB(clust, shards, NormalMH, n=n_iter, sigma=sigma, mean_prior=mean_prior, sigma_prior=sigma_prior, sigma_known=sigma_known, s= nr_servers, x_0 = x_0)

stopCluster(clust)

df = data.frame(lapply(lambda, function(y) y))
parallel_markov_chain = weightsComputation(df, method = "sample variance")

}

